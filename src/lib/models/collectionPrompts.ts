import { createClient } from "@/lib/utils/supabase/server"

/**
 * Data model for a collection-prompt relationship.
 * 'id' is optional for creation, as it may be auto-generated by the database.
 */
export interface CollectionPromptsData {
  id?: string
  collection_id: string
  prompt_id: string
}

class CollectionPrompts {
  /**
   * Create a new collection-prompt link.
   * @param collectionPrompts - The data for the new link (id optional)
   * @returns The created CollectionPromptsData object
   */
  static async create(collectionPrompts: CollectionPromptsData): Promise<CollectionPromptsData> {
    try {
      const supabase = await createClient()
      const { data, error } = await supabase.from("collection_prompts").insert(collectionPrompts).select().single()

      if (error) {
        throw new Error(`Error creating reference: ${error.message}`)
      }

      return data as CollectionPromptsData
    } catch (error) {
      console.error("Error creating collection-prompt link:", error)
      throw error
    }
  }

  /**
   * Get all prompt IDs in a collection.
   * @param collectionId - The collection's ID
   * @returns Array of prompt IDs (empty if none found)
   */
  static async getPrompts(collectionId: string): Promise<string[]> {
    try {
      const supabase = await createClient()
      const { data, error } = await supabase
        .from("collection_prompts")
        .select("prompt_id")
        .eq("collection_id", collectionId)

      if (error) {
        if (error.code === "PGRST116") {
          // No rows returned
          return []
        }
        throw new Error(`Error getting prompts for collection: ${error.message}`)
      }

      if (!data) return []
      return data.map((row) => row.prompt_id)
    } catch (error) {
      console.error("Error getting prompts by collection ID:", error)
      throw error
    }
  }

  /**
   * Get all collection IDs for a prompt.
   * @param promptId - The prompt's ID
   * @returns Array of collection IDs (empty if none found)
   */
  static async getCollections(promptId: string): Promise<string[]> {
    try {
      const supabase = await createClient()
      const { data, error } = await supabase
        .from("collection_prompts")
        .select("collection_id")
        .eq("prompt_id", promptId)

      if (error) {
        if (error.code === "PGRST116") {
          // No rows returned
          return []
        }
        throw new Error(`Error getting collections for prompt: ${error.message}`)
      }

      if (!data) return []
      return data.map((row) => row.collection_id)
    } catch (error) {
      console.error("Error getting collections for prompt:", error)
      throw error
    }
  }

  /**
   * Remove the link between a prompt and a collection.
   * @param promptId - The prompt's ID
   * @param collectionId - The collection's ID
   */
  static async delete(promptId: string, collectionId: string): Promise<void> {
    try {
      const supabase = await createClient()

      const { error } = await supabase
        .from("collection_prompts")
        .delete()
        .eq("prompt_id", promptId)
        .eq("collection_id", collectionId)

      if (error) {
        throw new Error(`Error removing prompt from collection: ${error.message}`)
      }
    } catch (error) {
      console.error("Error removing prompt from collection:", error)
      throw error
    }
  }

  /**
   * Get the number of prompts in a collection.
   * @param collectionId - The collection's ID
   * @returns The count of prompts
   */
  static async getPromptCount(collectionId: string): Promise<number> {
    try {
      const supabase = await createClient()
      const { count, error } = await supabase
        .from("collection_prompts")
        .select("prompt_id", { count: "exact", head: true })
        .eq("collection_id", collectionId)

      if (error) {
        throw new Error(`Error getting prompt count: ${error.message}`)
      }
      return count || 0
    } catch (error) {
      console.error("Error getting prompt count:", error)
      throw error
    }
  }

  /**
   * Get the number of collections a prompt belongs to.
   * @param promptId - The prompt's ID
   * @returns The count of collections
   */
  static async getCollectionCount(promptId: string): Promise<number> {
    try {
      const supabase = await createClient()
      const { count, error } = await supabase
        .from("collection_prompts")
        .select("collection_id", { count: "exact", head: true })
        .eq("prompt_id", promptId)

      if (error) {
        throw new Error(`Error getting collection count: ${error.message}`)
      }
      return count || 0
    } catch (error) {
      console.error("Error getting collection count:", error)
      throw error
    }
  }
}

export default CollectionPrompts
